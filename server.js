// Generated by CoffeeScript 1.6.3
(function() {
  var child_process, fs, http, keyvalListeners, logFileName, logStream, logToFile, onReady, port, quit, routes, server, stopListen, use,
    __slice = [].slice;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof window === "undefined" ? global : window;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof process !== "undefined";
      }
      if (typeof isPhoneGap === "undefined") {
        root.isPhoneGap = typeof document.ondeviceready !== "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  use = isNodeJs ? (function(module) {
    return require(module);
  }) : (function(module) {
    return window[module];
  });

  onReady = function(fn) {
    if (isNodeJs) {
      return process.nextTick(fn);
    } else {
      if (document.readystate !== "complete") {
        return fn();
      } else {
        return setTimeout((function() {
          return onReady(fn);
        }), 17);
      }
    }
  };

  fs = require("fs");

  child_process = require("child_process");

  logStream = void 0;

  logFileName = void 0;

  logToFile = function(arr, cb) {
    var name, now, oldfile;
    now = (new Date()).toISOString();
    name = "../logs/log-" + (now.slice(0, 10)) + ".log";
    if (name !== logFileName) {
      if (logStream) {
        oldfile = logFileName;
        logStream.on("close", function() {
          return child_process.exec("xz " + oldfile);
        });
        logStream.end();
      }
      logStream = fs.createWriteStream(name, {
        flags: "a"
      });
      logFileName = name;
    }
    return logStream.write("" + (JSON.stringify([now].concat(arr))) + "\n", "utf8", cb);
  };

  routes = {
    api: {
      log: function(req, res, data) {
        logToFile([req.url, req.headers, data]);
        res.writeHead(200, {
          connection: "keep-alive"
        });
        return res.end("ok");
      }
    }
  };

  port = process.env.API_PORT || 4444;

  http = require("http");

  server = http.createServer(function(req, res) {
    var data;
    logToFile([req.url, req.headers]);
    data = "";
    req.setEncoding("ascii");
    req.on("data", function(chunk) {
      return data += chunk;
    });
    return req.on("end", function() {
      var part, route, _i, _len, _ref;
      route = routes;
      _ref = req.url.split("/").filter(function(a) {
        return a;
      });
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        route = route[part];
        if (typeof route === "function") {
          return route(req, res, data);
        }
        if (typeof route === "undefined") {
          res.writeHead(404, {});
          res.end("404 not found");
          return;
        }
      }
      res.writeHead(404, {});
      return res.end("404 not found");
    });
  });

  server.listen(port, "localhost");

  onReady(function() {
    logToFile(["server started"]);
    return console.log("serving on port " + port);
  });

  quit = function() {
    return process.exit(1);
  };

  process.on("uncaughtException", window.onerror = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return logToFile(["error occured", String(args)], quit);
  });

  keyvalListeners = {};

  stopListen = function(listener) {
    var keyval, _i, _len, _ref, _results;
    _ref = listener.listen;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      keyval = _ref[_i];
      _results.push(keyvalListeners[keyval] = keyvalListeners.filter(function(listener2) {
        return listener2 !== listener;
      }));
    }
    return _results;
  };

  routes.api.keyval = {
    set: function(req, res, data) {
      var key, urlparts;
      urlparts = req.url.split("/");
      key = urlparts[urlparts.length - 1];
      data = JSON.parse(data);
      if (!data || typeof data !== "object") {
        return res.end("not an object");
      }
      return localforage.getItem(key, function(val) {
        var listener, listeners, _i, _len, _results;
        if (val && val.version && data.version !== val.version) {
          return res.end(JSON.stringify(val));
        }
        data.version = Date.now();
        localforage.setItem(key, data, function() {
          return res.end(String(data.version));
        });
        if (keyvalListeners[key]) {
          listeners = keyvalListeners[key];
          _results = [];
          for (_i = 0, _len = listeners.length; _i < _len; _i++) {
            listener = listeners[_i];
            _results.push(listener.res.end("[" + (JSON.stringify(key)) + "," + (JSON.stringify(data)) + "]"));
          }
          return _results;
        }
      });
    },
    get: function(req, res, data) {
      var key, urlparts;
      urlparts = req.url.split("/");
      key = urlparts[urlparts.length - 1];
      return localforage.getItem(key, function(val) {
        return res.end(JSON.stringify(val));
      });
    },
    subscribe: function(req, res, data) {
      var key, keys, listener, subscribe, _i, _len;
      res.setTimeout(0);
      data = JSON.parse(data);
      keys = Object.keys(data);
      listener = {
        listen: keys,
        res: res
      };
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (keyvalListeners[key] == null) {
          keyvalListeners[key] = [];
        }
        keyvalListeners[key].push(listener);
      }
      res.on("finish", function() {
        return stopListen(listener);
      });
      subscribe = function() {
        if (keys.length) {
          key = keys.pop();
          console.log(key);
          return localforage.getItem(key, function(val) {
            if (val.version !== data[key]) {
              return listener.res.end("[" + (JSON.stringify(key)) + "," + (JSON.stringify(val)) + "]");
            } else {
              return subscribe();
            }
          });
        }
      };
      return subscribe();
    }
  };

}).call(this);
